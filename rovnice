clc
clear
t0 = 0; % Pocatecni cas
x0 = [0;1] % Pocatecni podminka[1,0]
h = 0.01; % Delka kroku
t_end = 10; % Konecny cas
t = t0:h:t_end % Vektor casu


function [x_euler] = eulerova_metoda(time,pocatecni_podminka,odeFcn,delka_kroku)

x_euler = zeros(height(pocatecni_podminka),length(time));
x_euler(:,1) = pocatecni_podminka;

for i = 1:(length(time) - 1)
    a_euler = odeFcn(time, x_euler(:,i));
    x_euler(:,i+1) = x_euler(:,i) + delka_kroku*a_euler;
end
end

function [x_lichobeznikova] = lichoebeznikova(time,pocatecni_podminka,odeFcn,delka_kroku)
% Lichoběžníková metoda

x_lichobeznikova = zeros(height(pocatecni_podminka), length(time));
x_lichobeznikova(:,1) = pocatecni_podminka;

for i = 1:(length(time)-1)
    f1 = odeFcn(time(i), x_lichobeznikova(:,i));
    f2 = odeFcn(time(i) + delka_kroku, x_lichobeznikova(:,i) + (delka_kroku*f1));
    x_lichobeznikova(:,i+1) = x_lichobeznikova(:,i) + delka_kroku * (f1 + f2)/2;
end
end

function [x_tk] = runge_kutta(time,pocatecni_podminka,odeFcn,delka_kroku)
% Runge-Kutta 4. řádu (ode4)

x_tk = zeros(height(pocatecni_podminka), length(time));
x_tk(:,1) = pocatecni_podminka;

for i = 1:length(time)-1
    a1 = odeFcn(time(i), x_tk(:,i));
    a2 = odeFcn(time(i) + delka_kroku/2, x_tk(:,i) +  (delka_kroku/2)*a1);
    a3 = odeFcn(time(i) + delka_kroku/2, x_tk(:,i) +  (delka_kroku/2)*a2);
    a4 = odeFcn(time(i) + delka_kroku, x_tk(:,i) +  (delka_kroku)*a3);
    x_tk(:,i+1) = x_tk(:,i) + (delka_kroku / 6) * (a1 + 2*a2 + 2*a3 + a4);
end
end
